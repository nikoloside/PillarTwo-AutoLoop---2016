// Generated by CoffeeScript 1.8.0
(function() {

  var status_now = -1;//-1:停止 0: 1: 2: 3:
  var run_type = 0;//0:test  1:repeat
  var proc_now = 0;//username number
  var time_space = 1800;//時間間隔
  var time_space_text = 2500;//時間間隔
  var loop_max = 100;
  var runtime_proc,runtime_prepare,load,firstload,load_proc_now_details,check_load,save,save_proc_now,save_array_done,next_procedure;
  var default_url = "https://member.akb48.co.jp/logout.php";
  var default_value;
  var array_proc = [{"tar":"","sel":0,"arc":""}];
  var array_username = [];
  var array_done = [];
  var c_id;
  var numbers;
  var run_now_comment;

  //receive changing and update storage         change the status var
  chrome.runtime.onMessage.addListener(
    function(request, sender, sendResponse) {
      switch (request.for) {

        case "array_done_init":{
          check_load(true);
          sendResponse({
            msg: "success!"
          });
          break;
        }
        case "firstload":{
          firstload();
          load();
          sendResponse({
            msg: "success!"
          });
          break;
        }
        case "load":{
          load();
          sendResponse({
            msg: "success!"
          });
          break;
        }
        case "load":{
          firstload();
          load();
          sendResponse({
            msg: "success!"
          });
          break;
        }
        case "save":{
          if(request.name == "default_url") default_url = request.data;
          if(request.name == "default_value") default_value = request.data;
          if(request.name == "time_space_text") time_space_text = request.data;
          save();
          sendResponse({
            msg: "succes."
          });
          break;
        }
        case "save_array":{
          if(request.name == "tar") array_proc[request.num]["tar"] = request.data;
          if(request.name == "sel") array_proc[request.num]["sel"] = request.data;
          if(request.name == "arc") array_proc[request.num]["arc"] = request.data;
          if(request.name == "remove") array_proc.splice(request.num,1);
          if(request.name == "add") array_proc.splice(array_proc.length,1,request.data);
          if(request.name == "JSON") array_proc = request.data;
          save();
          sendResponse({
            msg: "succes."
          });
          break;
        }
        case "endproc":{
          //send message to content_scripts
          status_now = -1;
          load_proc_now_details(numbers);
          console.log("proc:end_proc status_now="+status_now);
          sendResponse({
            msg: "stop."
          });
          break;
        }
        case "startproc":{
          //send message to content_scripts
          if(status_now < 0) {
            status_now = 0;
            run_now = 0;
            load_proc_now_details(numbers);
            if(request.proc_now < array_username.length) proc_now = request.proc_now; else proc_now = 0;//temp
            if(request.time_space > 500) time_space = request.time_space;//temp
            run_type = request.name;
            runtime_prepare();
            console.log("proc:start_proc status_now="+status_now+" run_type="+run_type);
            sendResponse({
              msg:"start."
            });
          }else{
            console.log("proc:can_not_start status_now="+status_now);
            sendResponse({
              msg: "error. Please start after stoping current proc."
            });
          }
          break;
        }
        default:
      }
    });

  //runtime of proc
  runtime_prepare = function(){
    var array_bool = true;
    var array_tmp = [];
    if(default_value) array_tmp = default_value.split("\n");
    var array_insert = [];
    var array_bools = [];
    for(var i = 0; i < array_tmp.length-1; i++){
      var string = array_tmp[i];
      if(string && string.match(/^[0-9]{9}$/)) {
        array_insert[i] = array_tmp[i];
        array_bools[i] = false;
        //console.log(array_tmp[i]);
      }else {array_bool = false;}
    }
    if(array_bool && array_tmp.length !=0 ) {
      array_username = array_insert;console.log("load:matches successed."+array_username);
      loop_max = array_username.length;
      if (array_done.length == loop_max){}
      else {array_done = array_bools;save_array_done(-1);}
    }else{
      array_username = [];
      array_done = [];
      console.log("load:matches failed.");
    }
    chrome.tabs.getSelected(null, function(tab) {
        c_id = tab.id;
        runtime_proc(0);
    });

  }

  runtime_proc = function(run_now){
    if(array_proc[run_now]["sel"] < 2){
        //Your code below...
        var action_url = array_proc[run_now]["arc"];
        if(array_proc[run_now]["sel"] == 0) chrome.tabs.update(c_id,{ url: default_url });
                                       else chrome.tabs.update(c_id,{ url:action_url });
        console.log("proc_action: run_now = "+run_now+" msg = successed " + action_url);
        next_procedure(run_now);
    }else{
      var username = "";
      if(array_username[proc_now]) username = array_username[proc_now];
      chrome.tabs.sendRequest(c_id, {
        for: "proc_action",
        tar:array_proc[run_now]["tar"],
        sel:array_proc[run_now]["sel"],
        arc:array_proc[run_now]["arc"],
        username:username,
        run_now:run_now,
        proc_now:proc_now
      },
      function(response) {
          if(response.hantei === "true") {
            save_array_done(proc_now-1);//temp
          }
          if(array_proc[response.run_now]["sel"] == 2) {
            save_proc_now(proc_now);
            proc_now++;
          }
          next_procedure(response.run_now);
          console.log("proc_action: msg = "+response.msg);
      });
    }
  }

  next_procedure = function(run_now){
    setTimeout(function(a){
      run_now_comment = a;
      load_proc_now_details(numbers);
      if(status_now == 0){
          a++;
          if(a == array_proc.length) {
            if(run_type == 0 || proc_now == loop_max) {
              status_now = -1;
              console.log("proc:end_proc status_now="+status_now+" run_now="+a+" total="+loop_max+" proc_now="+proc_now);
            }else{
              a = 0;
              console.log("proc:continue_proc run_now="+a);
              runtime_proc(a);
            }
          }else{
            console.log("proc:continue_proc run_now="+a);
            runtime_proc(a);
          }
      }
    },time_space,run_now);
  }

  //save
  save = function()
  {
    //var channels = $("#channels").val();
    //var keywords = $("#keywords").val();
    chrome.storage.local.set({'default_url': default_url});
    chrome.storage.local.set({'default_value': default_value});
    chrome.storage.local.set({'time_space_text': time_space_text});
    chrome.storage.local.set({'array_proc':array_proc});

    console.log("save:"+default_value+" "+default_url+" "+array_proc);

    load();//すべてのpopupへの反映ははここで集中
  }
  save_proc_now = function(num)
  {
    chrome.storage.local.set({'once_start_num':num});
    console.log("save: now number is "+num);
  }

  save_array_done = function(num){

    if(num >= 0) array_done[num] = true;
    numbers = num;
    chrome.storage.local.set({'array_done':array_done},function(){
          load_proc_now_details(numbers);
    });


    console.log("save: array_done "+num);
  }

  //load
  firstload = function() {

    if(config_url){
        		console.log("read:"+config_url);
        		default_url = config_url;
        		chrome.runtime.sendMessage({
          		for: "loading",
         		 	name:"default_url",
          		data:config_url
        		},
        		function(response) {
          		console.log("load:config_url "+response.msg);
        		});
  	}
    if(config_array_proc){
            console.log("read:"+config_array_proc);
            array_proc = config_array_proc;
            chrome.runtime.sendMessage({
              for: "loading",
              name:"array_proc",
              data:config_array_proc
            },
            function(response) {
              console.log("load:config_array_proc "+response.msg);
            });
    }
    save();
  }
  load = function() {

    		chrome.storage.local.get('default_url', function (result) {
        			if(result.default_url) default_url = result.default_url;
        			console.log("read:"+result.default_url);
        			chrome.runtime.sendMessage({
          			for: "loading",
          			name:"default_url",
          			data:result.default_url
        			},
        			function(response) {
          			console.log("load:default_url "+response.msg);
        			});
    		});

    		chrome.storage.local.get('array_proc', function (result) {
        			if(result.array_proc) array_proc = result.array_proc;
        			console.log("read:"+result.array_proc);
        			chrome.runtime.sendMessage({
          			for: "loading",
          			name:"array_proc",
          			data:result.array_proc
        			},
        			function(response) {
          			console.log("load:array_proc "+response.msg);
        			});
    		});
    chrome.storage.local.get('time_space_text', function (result) {
        if(result.time_space_text) time_space_text = result.time_space_text;
        console.log("read:"+result.time_space_text);
        chrome.runtime.sendMessage({
          for: "loading",
          name:"time_space_text",
          data:result.time_space_text
        },
        function(response) {
          console.log("load:time_space_text ");//+response.msg);
        });

    });

    chrome.storage.local.get('default_value', function (result) {
        if(result.default_value) default_value = result.default_value;
        console.log("read:"+result.default_value);
        chrome.runtime.sendMessage({
          for: "loading",
          name:"default_value",
          data:result.default_value
        },
        function(response) {
          console.log("load:default_value ");//+response.msg);
        });

    });

    chrome.storage.local.get('once_start_num', function (result) {
        var once_start_num;
        if(result.once_start_num) {
          console.log("read:"+result.once_start_num);
          chrome.runtime.sendMessage({
            for: "loading",
            name:"once_start_num",
            data:result.once_start_num
          },
          function(response) {
            console.log("load:once_start_num "+response.msg);
          });
        }else console.log("load:no once_start_num parameter");
    });
    load_proc_now_details(-1);
  }

  load_proc_now_details = function(num){

              chrome.runtime.sendMessage({
                for: "loading",
                name:"now_num",
                data: (num + 1) +""
              },
              function(response) {
              });

        chrome.storage.local.get('array_done', function (result) {
            if(result.array_done) array_done = result.array_done;
            var username = "";
            var status = "";
            if (num>=0) username = array_username[num];
            if (status_now == -1) status = "停止状態";　else status = "第" +　run_now_comment + "項";
            chrome.runtime.sendMessage({
              for: "loading",
              name:"array_done",
              data:result.array_done,
              num: numbers,
              now_name:username,
              status: status
            },
            function(response) {
              console.log("refresh ");//+response.msg);
            });
        });
  }

  check_load = function(bool_init_array_done){
    var array_bool = true;
    var array_tmp = [];
    if(default_value) array_tmp = default_value.split("\n");
    var array_insert = [];
    var array_bools = [];
    for(var i = 0; i < array_tmp.length-1; i++){
      var string = array_tmp[i];
      if(string && string.match(/^[0-9]{9}$/)) {
        array_insert[i] = array_tmp[i];
        array_bools[i] = false;
        //console.log(array_tmp[i]);
      }else {array_bool = false;}
    }
    if(array_bool && array_tmp.length !=0 ) {
      array_username = array_insert;console.log("load:matches successed."+array_username);
      loop_max = array_username.length;
      if (array_done.length == loop_max && !bool_init_array_done){}
      else {array_done = array_bools;save_array_done(-1);}
    }else{
      array_username = [];
      array_done = [];
      console.log("load:matches failed.");
    }
  }



}).call(this);
